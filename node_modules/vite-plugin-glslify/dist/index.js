var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  DEFAULT_EXTENSIONS: () => DEFAULT_EXTENSIONS,
  default: () => src_default,
  glslify: () => glslify
});
module.exports = __toCommonJS(src_exports);
var import_pluginutils = require("@rollup/pluginutils");

// src/files_compiler.ts
var import_glslify = require("glslify");
var import_path = __toESM(require("path"));
function filesCompiler(extFilter, options) {
  return {
    name: "vite-plugin-glslify:files",
    transform(code, id) {
      if (extFilter(id)) {
        return {
          code: `export default \`${(0, import_glslify.compile)(code, {
            ...options,
            basedir: import_path.default.dirname(id)
          })}\``
        };
      }
      return null;
    },
    handleHotUpdate(ctx) {
      if (!extFilter(ctx.file))
        return;
      const defaultRead = ctx.read;
      ctx.read = async () => {
        return (0, import_glslify.compile)(await defaultRead(), {
          ...options,
          basedir: import_path.default.dirname(ctx.file)
        });
      };
    }
  };
}

// src/literals_compiler.ts
var import_astring = require("astring");

// node_modules/estree-walker/dist/esm/estree-walker.js
var WalkerBase = class {
  constructor() {
    this.should_skip = false;
    this.should_remove = false;
    this.replacement = null;
    this.context = {
      skip: () => this.should_skip = true,
      remove: () => this.should_remove = true,
      replace: (node) => this.replacement = node
    };
  }
  /**
   *
   * @param {any} parent
   * @param {string} prop
   * @param {number} index
   * @param {BaseNode} node
   */
  replace(parent, prop, index, node) {
    if (parent) {
      if (index !== null) {
        parent[prop][index] = node;
      } else {
        parent[prop] = node;
      }
    }
  }
  /**
   *
   * @param {any} parent
   * @param {string} prop
   * @param {number} index
   */
  remove(parent, prop, index) {
    if (parent) {
      if (index !== null) {
        parent[prop].splice(index, 1);
      } else {
        delete parent[prop];
      }
    }
  }
};
var SyncWalker = class extends WalkerBase {
  /**
   *
   * @param {SyncHandler} enter
   * @param {SyncHandler} leave
   */
  constructor(enter, leave) {
    super();
    this.enter = enter;
    this.leave = leave;
  }
  /**
   *
   * @param {BaseNode} node
   * @param {BaseNode} parent
   * @param {string} [prop]
   * @param {number} [index]
   * @returns {BaseNode}
   */
  visit(node, parent, prop, index) {
    if (node) {
      if (this.enter) {
        const _should_skip = this.should_skip;
        const _should_remove = this.should_remove;
        const _replacement = this.replacement;
        this.should_skip = false;
        this.should_remove = false;
        this.replacement = null;
        this.enter.call(this.context, node, parent, prop, index);
        if (this.replacement) {
          node = this.replacement;
          this.replace(parent, prop, index, node);
        }
        if (this.should_remove) {
          this.remove(parent, prop, index);
        }
        const skipped = this.should_skip;
        const removed = this.should_remove;
        this.should_skip = _should_skip;
        this.should_remove = _should_remove;
        this.replacement = _replacement;
        if (skipped)
          return node;
        if (removed)
          return null;
      }
      for (const key in node) {
        const value = node[key];
        if (typeof value !== "object") {
          continue;
        } else if (Array.isArray(value)) {
          for (let i = 0; i < value.length; i += 1) {
            if (value[i] !== null && typeof value[i].type === "string") {
              if (!this.visit(value[i], node, key, i)) {
                i--;
              }
            }
          }
        } else if (value !== null && typeof value.type === "string") {
          this.visit(value, node, key, null);
        }
      }
      if (this.leave) {
        const _replacement = this.replacement;
        const _should_remove = this.should_remove;
        this.replacement = null;
        this.should_remove = false;
        this.leave.call(this.context, node, parent, prop, index);
        if (this.replacement) {
          node = this.replacement;
          this.replace(parent, prop, index, node);
        }
        if (this.should_remove) {
          this.remove(parent, prop, index);
        }
        const removed = this.should_remove;
        this.replacement = _replacement;
        this.should_remove = _should_remove;
        if (removed)
          return null;
      }
    }
    return node;
  }
};
function walk(ast, { enter, leave }) {
  const instance = new SyncWalker(enter, leave);
  return instance.visit(ast, null);
}

// src/literals_compiler.ts
var import_glslify2 = require("glslify");
var import_magic_string = __toESM(require("magic-string"));
var import_path2 = __toESM(require("path"));
function literalsCompiler(idFilter, funcFilter, options) {
  return {
    name: "vite-plugin-glslify:literals",
    transform(code, id) {
      if (!idFilter(id))
        return void 0;
      if (funcFilter(code)) {
        const ast = this.parse(code);
        const s = new import_magic_string.default(code);
        const compileAndOverwrite = (node, start, end) => {
          const target = (0, import_astring.generate)(node);
          try {
            const compiled = (0, import_glslify2.compile)(target.replace(/`/g, ""), {
              ...options,
              basedir: import_path2.default.dirname(id)
            });
            s.overwrite(start, end, `\`${compiled}\``);
          } catch (e) {
            this.error(e.message);
          }
        };
        walk(ast, {
          enter(node) {
            if (!node.type) {
              return;
            }
            if (node?.type === "TaggedTemplateExpression") {
              if (funcFilter(node.tag.name)) {
                const { start, end } = node;
                compileAndOverwrite(node.quasi, start, end);
              }
            } else if (node?.type === "CallExpression") {
              if (funcFilter(node.callee.name)) {
                const { start, end } = node;
                compileAndOverwrite(node.arguments[0], start, end);
              }
            }
          }
        });
        return {
          code: s.toString()
        };
      }
      return void 0;
    }
  };
}

// src/index.ts
var DEFAULT_EXTENSIONS = [/\.vert$/, /\.frag$/, /\.glsl$/];
function glslify(options = {}) {
  const plugins = [];
  const transformFiles = options.transformFiles ?? true;
  const transformLiterals = options.transformLiterals ?? true;
  const glslifyOptions = options.options ?? {};
  if (transformFiles) {
    const extFilter = (0, import_pluginutils.createFilter)(options.extensions || DEFAULT_EXTENSIONS);
    plugins.push(filesCompiler(extFilter, glslifyOptions));
  }
  if (transformLiterals) {
    const idFilter = (0, import_pluginutils.createFilter)(
      options.include || [/\.ts$/, /\.js$/],
      options.exclude || ["node_modules/**"]
    );
    const funcFilter = (0, import_pluginutils.createFilter)(options.funcName || [/glsl/]);
    plugins.push(literalsCompiler(idFilter, funcFilter, glslifyOptions));
  }
  return plugins;
}
var src_default = glslify;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DEFAULT_EXTENSIONS,
  glslify
});
